# .github/workflows/terraform-deploy-version2.yml
name: Deploy ARGUS (Provision if Missing)

on:
  push:
    branches:
      - version-v2

jobs:
  terraform:
    name: Terraform Plan & Apply (Version 2)
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

       # Terraform variables come in as TF_VAR_<var_name>
      TF_VAR_azure_openai_endpoint:              ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      TF_VAR_azure_openai_key:                   ${{ secrets.AZURE_OPENAI_KEY }}
      TF_VAR_azure_openai_model_deployment_name: ${{ secrets.AZURE_OPENAI_MODEL_DEPLOYMENT_NAME }}

    defaults:
      run:
        working-directory: ./infra
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          CREDS: ${{ secrets.AZURE_LOGIN_SP_CREDENTIALS }}

      - name: Register Azure Resource Providers if not registered
        run: |
          for NAMESPACE in \
            Microsoft.DataLakeAnalytics \
            Microsoft.DesktopVirtualization \
            Microsoft.DBforPostgreSQL \
            Microsoft.DBforMariaDB \
            Microsoft.ServiceFabric \
            Microsoft.DevTestLab \
            Microsoft.Cdn \
            Microsoft.Relay \
            Microsoft.ApiManagement \
            Microsoft.Cache \
            Microsoft.AppPlatform \
            Microsoft.StreamAnalytics \
            Microsoft.DataProtection \
            Microsoft.DataMigration \
            Microsoft.MixedReality \
            Microsoft.Devices \
            Microsoft.OperationsManagement \
            Microsoft.CustomProviders \
            Microsoft.HealthcareApis \
            Microsoft.DataFactory \
            Microsoft.BotService \
            Microsoft.EventHub \
            Microsoft.SecurityInsights \
            Microsoft.NotificationHubs \
            Microsoft.AVS \
            Microsoft.RecoveryServices \
            Microsoft.AppConfiguration \
            Microsoft.Automation \
            Microsoft.Databricks \
            Microsoft.SignalRService \
            Microsoft.DataLakeStore \
            Microsoft.ContainerService \
            Microsoft.HDInsight \
            Microsoft.Maps \
            Microsoft.DBforMySQL \
            Microsoft.PowerBIDedicated \
            Microsoft.Kusto
          do
            STATE=$(az provider show --namespace $NAMESPACE --query "registrationState" -o tsv 2>/dev/null || echo "NotRegistered")
            if [ "$STATE" != "Registered" ]; then
              echo "Registering $NAMESPACE..."
              az provider register --namespace $NAMESPACE
            else
              echo "$NAMESPACE is already registered."
            fi
          done


      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        #run: terraform plan -lock=false -input=false -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" -var-file="terraform.tfvars"
        run: |
          terraform plan \
            -lock=false \
            -input=false \
            -var="client_id=${{ secrets.ARM_CLIENT_ID }}" \
            -var="client_secret=${{ secrets.ARM_CLIENT_SECRET }}" \
            -var="tenant_id=${{ secrets.ARM_TENANT_ID }}" \
            -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -var="azure_openai_endpoint=${{ secrets.AZURE_OPENAI_ENDPOINT }}" \
            -var="azure_openai_key=${{ secrets.AZURE_OPENAI_KEY }}" \
            -var="azure_openai_model_deployment_name=${{ secrets.AZURE_OPENAI_MODEL_DEPLOYMENT_NAME }}" \
            -var-file="terraform.tfvars"
            

      - name: Terraform Apply
        #run: terraform apply -auto-approve -lock=false -input=false -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" -var-file="terraform.tfvars"
        run: |
          terraform apply -auto-approve \
            -lock=false \
            -input=false \
            -var="client_id=${{ secrets.ARM_CLIENT_ID }}" \
            -var="client_secret=${{ secrets.ARM_CLIENT_SECRET }}" \
            -var="tenant_id=${{ secrets.ARM_TENANT_ID }}" \
            -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -var="azure_openai_endpoint=${{ secrets.AZURE_OPENAI_ENDPOINT }}" \
            -var="azure_openai_key=${{ secrets.AZURE_OPENAI_KEY }}" \
            -var="azure_openai_model_deployment_name=${{ secrets.AZURE_OPENAI_MODEL_DEPLOYMENT_NAME }}" \
            -var-file="terraform.tfvars"
